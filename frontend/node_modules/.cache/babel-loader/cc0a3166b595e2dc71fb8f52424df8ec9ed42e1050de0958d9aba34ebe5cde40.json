{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Badge=_ref=>{let{color='gray',variant='solid',children,className='',icon,onClick,ariaLabel,animated=true}=_ref;const[isPressed,setIsPressed]=useState(false);const getBaseClass=()=>{if(variant==='outline'){return`badge-outline badge-outline-${color}`;}return`badge-${color}`;};const isInteractive=!!onClick;// Add animation classes\nconst animationClass=animated?'transition-all duration-150':'';const pressedClass=isPressed&&animated?'transform scale-95':'';const interactiveClass=isInteractive&&animated?'hover:shadow-sm hover:scale-105':'';const badgeClass=`\n    badge \n    ${getBaseClass()} \n    ${isInteractive?'cursor-pointer':''} \n    ${className}\n    ${animationClass}\n    ${pressedClass}\n    ${interactiveClass}\n  `;// Handle keyboard interaction for interactive badges\nconst handleKeyDown=e=>{if(isInteractive&&(e.key==='Enter'||e.key===' ')){e.preventDefault();setIsPressed(true);onClick();}};const handleKeyUp=()=>{if(isInteractive){setIsPressed(false);}};const handleMouseDown=()=>{if(isInteractive){setIsPressed(true);}};const handleMouseUp=()=>{if(isInteractive){setIsPressed(false);}};const handleMouseLeave=()=>{if(isInteractive){setIsPressed(false);}};return/*#__PURE__*/_jsxs(\"span\",{className:badgeClass,onClick:onClick,onKeyDown:handleKeyDown,onKeyUp:handleKeyUp,onMouseDown:handleMouseDown,onMouseUp:handleMouseUp,onMouseLeave:handleMouseLeave,role:isInteractive?'button':undefined,tabIndex:isInteractive?0:undefined,\"aria-label\":ariaLabel,\"aria-pressed\":isInteractive?isPressed:undefined,children:[icon&&/*#__PURE__*/_jsx(\"span\",{className:`mr-1 ${animated?'inline-block transform transition-transform group-hover:rotate-6':''}`,\"aria-hidden\":\"true\",children:icon}),/*#__PURE__*/_jsx(\"span\",{className:animated?'transition-all duration-150':'',children:children})]});};export default Badge;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Badge","_ref","color","variant","children","className","icon","onClick","ariaLabel","animated","isPressed","setIsPressed","getBaseClass","isInteractive","animationClass","pressedClass","interactiveClass","badgeClass","handleKeyDown","e","key","preventDefault","handleKeyUp","handleMouseDown","handleMouseUp","handleMouseLeave","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onMouseLeave","role","undefined","tabIndex"],"sources":["/Users/mosiho/Projects/Nova/frontend/src/components/ui/Badge.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nexport type BadgeColor = 'blue' | 'green' | 'red' | 'yellow' | 'gray' | 'purple';\nexport type BadgeVariant = 'solid' | 'outline';\n\ninterface BadgeProps {\n  color?: BadgeColor;\n  variant?: BadgeVariant;\n  children: React.ReactNode;\n  className?: string;\n  icon?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  animated?: boolean;\n}\n\nconst Badge: React.FC<BadgeProps> = ({\n  color = 'gray',\n  variant = 'solid',\n  children,\n  className = '',\n  icon,\n  onClick,\n  ariaLabel,\n  animated = true\n}) => {\n  const [isPressed, setIsPressed] = useState(false);\n  \n  const getBaseClass = (): string => {\n    if (variant === 'outline') {\n      return `badge-outline badge-outline-${color}`;\n    }\n    \n    return `badge-${color}`;\n  };\n  \n  const isInteractive = !!onClick;\n  \n  // Add animation classes\n  const animationClass = animated \n    ? 'transition-all duration-150' \n    : '';\n  \n  const pressedClass = isPressed && animated \n    ? 'transform scale-95' \n    : '';\n  \n  const interactiveClass = isInteractive && animated\n    ? 'hover:shadow-sm hover:scale-105' \n    : '';\n  \n  const badgeClass = `\n    badge \n    ${getBaseClass()} \n    ${isInteractive ? 'cursor-pointer' : ''} \n    ${className}\n    ${animationClass}\n    ${pressedClass}\n    ${interactiveClass}\n  `;\n  \n  // Handle keyboard interaction for interactive badges\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (isInteractive && (e.key === 'Enter' || e.key === ' ')) {\n      e.preventDefault();\n      setIsPressed(true);\n      onClick();\n    }\n  };\n  \n  const handleKeyUp = () => {\n    if (isInteractive) {\n      setIsPressed(false);\n    }\n  };\n  \n  const handleMouseDown = () => {\n    if (isInteractive) {\n      setIsPressed(true);\n    }\n  };\n  \n  const handleMouseUp = () => {\n    if (isInteractive) {\n      setIsPressed(false);\n    }\n  };\n  \n  const handleMouseLeave = () => {\n    if (isInteractive) {\n      setIsPressed(false);\n    }\n  };\n  \n  return (\n    <span \n      className={badgeClass}\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseLeave}\n      role={isInteractive ? 'button' : undefined}\n      tabIndex={isInteractive ? 0 : undefined}\n      aria-label={ariaLabel}\n      aria-pressed={isInteractive ? isPressed : undefined}\n    >\n      {icon && (\n        <span \n          className={`mr-1 ${animated ? 'inline-block transform transition-transform group-hover:rotate-6' : ''}`} \n          aria-hidden=\"true\"\n        >\n          {icon}\n        </span>\n      )}\n      <span className={animated ? 'transition-all duration-150' : ''}>\n        {children}\n      </span>\n    </span>\n  );\n};\n\nexport default Badge; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAgBxC,KAAM,CAAAC,KAA2B,CAAGC,IAAA,EAS9B,IAT+B,CACnCC,KAAK,CAAG,MAAM,CACdC,OAAO,CAAG,OAAO,CACjBC,QAAQ,CACRC,SAAS,CAAG,EAAE,CACdC,IAAI,CACJC,OAAO,CACPC,SAAS,CACTC,QAAQ,CAAG,IACb,CAAC,CAAAR,IAAA,CACC,KAAM,CAACS,SAAS,CAAEC,YAAY,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CAEjD,KAAM,CAAAiB,YAAY,CAAGA,CAAA,GAAc,CACjC,GAAIT,OAAO,GAAK,SAAS,CAAE,CACzB,MAAO,+BAA+BD,KAAK,EAAE,CAC/C,CAEA,MAAO,SAASA,KAAK,EAAE,CACzB,CAAC,CAED,KAAM,CAAAW,aAAa,CAAG,CAAC,CAACN,OAAO,CAE/B;AACA,KAAM,CAAAO,cAAc,CAAGL,QAAQ,CAC3B,6BAA6B,CAC7B,EAAE,CAEN,KAAM,CAAAM,YAAY,CAAGL,SAAS,EAAID,QAAQ,CACtC,oBAAoB,CACpB,EAAE,CAEN,KAAM,CAAAO,gBAAgB,CAAGH,aAAa,EAAIJ,QAAQ,CAC9C,iCAAiC,CACjC,EAAE,CAEN,KAAM,CAAAQ,UAAU,CAAG;AACrB;AACA,MAAML,YAAY,CAAC,CAAC;AACpB,MAAMC,aAAa,CAAG,gBAAgB,CAAG,EAAE;AAC3C,MAAMR,SAAS;AACf,MAAMS,cAAc;AACpB,MAAMC,YAAY;AAClB,MAAMC,gBAAgB;AACtB,GAAG,CAED;AACA,KAAM,CAAAE,aAAa,CAAIC,CAAsB,EAAK,CAChD,GAAIN,aAAa,GAAKM,CAAC,CAACC,GAAG,GAAK,OAAO,EAAID,CAAC,CAACC,GAAG,GAAK,GAAG,CAAC,CAAE,CACzDD,CAAC,CAACE,cAAc,CAAC,CAAC,CAClBV,YAAY,CAAC,IAAI,CAAC,CAClBJ,OAAO,CAAC,CAAC,CACX,CACF,CAAC,CAED,KAAM,CAAAe,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAIT,aAAa,CAAE,CACjBF,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAY,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAIV,aAAa,CAAE,CACjBF,YAAY,CAAC,IAAI,CAAC,CACpB,CACF,CAAC,CAED,KAAM,CAAAa,aAAa,CAAGA,CAAA,GAAM,CAC1B,GAAIX,aAAa,CAAE,CACjBF,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAc,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,GAAIZ,aAAa,CAAE,CACjBF,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,mBACEZ,KAAA,SACEM,SAAS,CAAEY,UAAW,CACtBV,OAAO,CAAEA,OAAQ,CACjBmB,SAAS,CAAER,aAAc,CACzBS,OAAO,CAAEL,WAAY,CACrBM,WAAW,CAAEL,eAAgB,CAC7BM,SAAS,CAAEL,aAAc,CACzBM,YAAY,CAAEL,gBAAiB,CAC/BM,IAAI,CAAElB,aAAa,CAAG,QAAQ,CAAGmB,SAAU,CAC3CC,QAAQ,CAAEpB,aAAa,CAAG,CAAC,CAAGmB,SAAU,CACxC,aAAYxB,SAAU,CACtB,eAAcK,aAAa,CAAGH,SAAS,CAAGsB,SAAU,CAAA5B,QAAA,EAEnDE,IAAI,eACHT,IAAA,SACEQ,SAAS,CAAE,QAAQI,QAAQ,CAAG,kEAAkE,CAAG,EAAE,EAAG,CACxG,cAAY,MAAM,CAAAL,QAAA,CAEjBE,IAAI,CACD,CACP,cACDT,IAAA,SAAMQ,SAAS,CAAEI,QAAQ,CAAG,6BAA6B,CAAG,EAAG,CAAAL,QAAA,CAC5DA,QAAQ,CACL,CAAC,EACH,CAAC,CAEX,CAAC,CAED,cAAe,CAAAJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}