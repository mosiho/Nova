{"ast":null,"code":"// Mock data service for development without a backend\n\n// Sample lab tests data\nexport const mockLabTests = [{\n  _id: \"1\",\n  name: \"Complete Blood Count\",\n  provider: \"LabCorp\",\n  date: \"2023-06-15\",\n  type: \"blood\",\n  status: \"completed\",\n  results: [{\n    name: \"White Blood Cell Count\",\n    value: 7.2,\n    unit: \"K/uL\",\n    isAbnormal: false\n  }, {\n    name: \"Red Blood Cell Count\",\n    value: 4.9,\n    unit: \"M/uL\",\n    isAbnormal: false\n  }, {\n    name: \"Hemoglobin\",\n    value: 15.2,\n    unit: \"g/dL\",\n    isAbnormal: false\n  }, {\n    name: \"Hematocrit\",\n    value: 44.1,\n    unit: \"%\",\n    isAbnormal: false\n  }, {\n    name: \"Platelet Count\",\n    value: 210,\n    unit: \"K/uL\",\n    isAbnormal: false\n  }]\n}, {\n  _id: \"2\",\n  name: \"Comprehensive Metabolic Panel\",\n  provider: \"Quest Diagnostics\",\n  date: \"2023-05-10\",\n  type: \"blood\",\n  status: \"completed\",\n  results: [{\n    name: \"Glucose\",\n    value: 105,\n    unit: \"mg/dL\",\n    isAbnormal: true\n  }, {\n    name: \"Calcium\",\n    value: 9.5,\n    unit: \"mg/dL\",\n    isAbnormal: false\n  }, {\n    name: \"Sodium\",\n    value: 141,\n    unit: \"mmol/L\",\n    isAbnormal: false\n  }, {\n    name: \"Potassium\",\n    value: 4.2,\n    unit: \"mmol/L\",\n    isAbnormal: false\n  }, {\n    name: \"CO2\",\n    value: 24,\n    unit: \"mmol/L\",\n    isAbnormal: false\n  }, {\n    name: \"Chloride\",\n    value: 101,\n    unit: \"mmol/L\",\n    isAbnormal: false\n  }, {\n    name: \"BUN\",\n    value: 18,\n    unit: \"mg/dL\",\n    isAbnormal: false\n  }, {\n    name: \"Creatinine\",\n    value: 0.9,\n    unit: \"mg/dL\",\n    isAbnormal: false\n  }, {\n    name: \"ALT\",\n    value: 32,\n    unit: \"U/L\",\n    isAbnormal: false\n  }, {\n    name: \"AST\",\n    value: 28,\n    unit: \"U/L\",\n    isAbnormal: false\n  }]\n}, {\n  _id: \"3\",\n  name: \"Lipid Panel\",\n  provider: \"LabCorp\",\n  date: \"2023-04-22\",\n  type: \"blood\",\n  status: \"completed\",\n  results: [{\n    name: \"Total Cholesterol\",\n    value: 215,\n    unit: \"mg/dL\",\n    isAbnormal: true\n  }, {\n    name: \"Triglycerides\",\n    value: 150,\n    unit: \"mg/dL\",\n    isAbnormal: false\n  }, {\n    name: \"HDL Cholesterol\",\n    value: 48,\n    unit: \"mg/dL\",\n    isAbnormal: false\n  }, {\n    name: \"LDL Cholesterol\",\n    value: 145,\n    unit: \"mg/dL\",\n    isAbnormal: true\n  }, {\n    name: \"Total Cholesterol/HDL Ratio\",\n    value: 4.5,\n    unit: \"\",\n    isAbnormal: false\n  }]\n}, {\n  _id: \"4\",\n  name: \"Vitamin D, 25-Hydroxy\",\n  provider: \"Quest Diagnostics\",\n  date: \"2023-03-05\",\n  type: \"blood\",\n  status: \"completed\",\n  results: [{\n    name: \"Vitamin D, 25-Hydroxy\",\n    value: 28,\n    unit: \"ng/mL\",\n    isAbnormal: true\n  }]\n}, {\n  _id: \"5\",\n  name: \"Thyroid Panel\",\n  provider: \"LabCorp\",\n  date: \"2023-02-18\",\n  type: \"blood\",\n  status: \"completed\",\n  results: [{\n    name: \"TSH\",\n    value: 2.4,\n    unit: \"uIU/mL\",\n    isAbnormal: false\n  }, {\n    name: \"T4, Free\",\n    value: 1.1,\n    unit: \"ng/dL\",\n    isAbnormal: false\n  }, {\n    name: \"T3, Free\",\n    value: 3.1,\n    unit: \"pg/mL\",\n    isAbnormal: false\n  }]\n}];\n\n// Mock API responses\nexport const mockApiResponses = {\n  getLabTests: {\n    success: true,\n    data: mockLabTests\n  },\n  getLabTestById: id => ({\n    success: true,\n    data: mockLabTests.find(test => test._id === id) || null\n  }),\n  createLabTest: data => {\n    const newTest = {\n      _id: Math.random().toString(36).substring(2, 10),\n      ...data,\n      status: \"completed\"\n    };\n    return {\n      success: true,\n      data: newTest\n    };\n  }\n};","map":{"version":3,"names":["mockLabTests","_id","name","provider","date","type","status","results","value","unit","isAbnormal","mockApiResponses","getLabTests","success","data","getLabTestById","id","find","test","createLabTest","newTest","Math","random","toString","substring"],"sources":["/Users/mosiho/Projects/Nova/frontend/src/services/mockData.js"],"sourcesContent":["// Mock data service for development without a backend\n\n// Sample lab tests data\nexport const mockLabTests = [\n  {\n    _id: \"1\",\n    name: \"Complete Blood Count\",\n    provider: \"LabCorp\",\n    date: \"2023-06-15\",\n    type: \"blood\",\n    status: \"completed\",\n    results: [\n      { name: \"White Blood Cell Count\", value: 7.2, unit: \"K/uL\", isAbnormal: false },\n      { name: \"Red Blood Cell Count\", value: 4.9, unit: \"M/uL\", isAbnormal: false },\n      { name: \"Hemoglobin\", value: 15.2, unit: \"g/dL\", isAbnormal: false },\n      { name: \"Hematocrit\", value: 44.1, unit: \"%\", isAbnormal: false },\n      { name: \"Platelet Count\", value: 210, unit: \"K/uL\", isAbnormal: false }\n    ]\n  },\n  {\n    _id: \"2\",\n    name: \"Comprehensive Metabolic Panel\",\n    provider: \"Quest Diagnostics\",\n    date: \"2023-05-10\",\n    type: \"blood\",\n    status: \"completed\",\n    results: [\n      { name: \"Glucose\", value: 105, unit: \"mg/dL\", isAbnormal: true },\n      { name: \"Calcium\", value: 9.5, unit: \"mg/dL\", isAbnormal: false },\n      { name: \"Sodium\", value: 141, unit: \"mmol/L\", isAbnormal: false },\n      { name: \"Potassium\", value: 4.2, unit: \"mmol/L\", isAbnormal: false },\n      { name: \"CO2\", value: 24, unit: \"mmol/L\", isAbnormal: false },\n      { name: \"Chloride\", value: 101, unit: \"mmol/L\", isAbnormal: false },\n      { name: \"BUN\", value: 18, unit: \"mg/dL\", isAbnormal: false },\n      { name: \"Creatinine\", value: 0.9, unit: \"mg/dL\", isAbnormal: false },\n      { name: \"ALT\", value: 32, unit: \"U/L\", isAbnormal: false },\n      { name: \"AST\", value: 28, unit: \"U/L\", isAbnormal: false }\n    ]\n  },\n  {\n    _id: \"3\",\n    name: \"Lipid Panel\",\n    provider: \"LabCorp\",\n    date: \"2023-04-22\",\n    type: \"blood\",\n    status: \"completed\",\n    results: [\n      { name: \"Total Cholesterol\", value: 215, unit: \"mg/dL\", isAbnormal: true },\n      { name: \"Triglycerides\", value: 150, unit: \"mg/dL\", isAbnormal: false },\n      { name: \"HDL Cholesterol\", value: 48, unit: \"mg/dL\", isAbnormal: false },\n      { name: \"LDL Cholesterol\", value: 145, unit: \"mg/dL\", isAbnormal: true },\n      { name: \"Total Cholesterol/HDL Ratio\", value: 4.5, unit: \"\", isAbnormal: false }\n    ]\n  },\n  {\n    _id: \"4\",\n    name: \"Vitamin D, 25-Hydroxy\",\n    provider: \"Quest Diagnostics\",\n    date: \"2023-03-05\",\n    type: \"blood\",\n    status: \"completed\",\n    results: [\n      { name: \"Vitamin D, 25-Hydroxy\", value: 28, unit: \"ng/mL\", isAbnormal: true }\n    ]\n  },\n  {\n    _id: \"5\",\n    name: \"Thyroid Panel\",\n    provider: \"LabCorp\",\n    date: \"2023-02-18\",\n    type: \"blood\",\n    status: \"completed\",\n    results: [\n      { name: \"TSH\", value: 2.4, unit: \"uIU/mL\", isAbnormal: false },\n      { name: \"T4, Free\", value: 1.1, unit: \"ng/dL\", isAbnormal: false },\n      { name: \"T3, Free\", value: 3.1, unit: \"pg/mL\", isAbnormal: false }\n    ]\n  }\n];\n\n// Mock API responses\nexport const mockApiResponses = {\n  getLabTests: {\n    success: true,\n    data: mockLabTests\n  },\n  getLabTestById: (id) => ({\n    success: true,\n    data: mockLabTests.find(test => test._id === id) || null\n  }),\n  createLabTest: (data) => {\n    const newTest = {\n      _id: Math.random().toString(36).substring(2, 10),\n      ...data,\n      status: \"completed\"\n    };\n    return {\n      success: true,\n      data: newTest\n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}